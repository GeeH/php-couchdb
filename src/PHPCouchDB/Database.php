<?php

/**
 * Functionality at the database level
 */

namespace PHPCouchDB;

/**
 * Working with a particular database is all done here.  Usually instantiated
 * by the Server object as it has the connection details we need to use.
 */


class Database
{
    protected $client;
    protected $db_name;


    /**
     * Constructor for the Database object - this is usually called by
     * Server::useDb rather than directly
     *
     * @param array $options This should contain "client" (implementing
     *  \GuzzleHTTP\ClientInterface) and "db_name" (a string)
     * @throws \PHPCouchDB\Exception\ServerException if we don't have the
     *  expected constructor arguments
     */

    public function __construct($options)
    {
        if (empty($options) || !is_array($options)) {
            throw new \PHPCouchDB\Exception\ServerException(
                '$options is a required parameter, array must contain both the client and a db_name'
            );
        }

        if (isset($options['client']) && $options['client'] instanceof \GuzzleHttp\ClientInterface) {
            $this->client = $options['client'];
        } else {
            throw new \PHPCouchDB\Exception\ServerException(
                "The options array must contain a 'client' element of type GuzzleHTTP\ClientInterface"
            );
        }

        if (isset($options['db_name']) && is_string($options['db_name'])) {
            $this->db_name = $options['db_name'];
        } else {
            throw new \PHPCouchDB\Exception\ServerException(
                "The options array must contain a 'db_name' key with a value of type string"
            );
        }
    }

    /**
     * Fetch all the documents from the database
     *
     * @param array $options  Any modifiers needed for the query  These include:
     *      - include_docs   Defaults to true
     * @return array The array contains `PHPCouchDB\Document` objects
     */
    public function getAllDocs($options = []) : array
    {
        $endpoint = "/" . $this->db_name . "/_all_docs";
        $query = ["include_docs" => "true"];
        $response = $this->client->request("GET", $endpoint, ["query" => $query]);
        if ($response->getStatusCode() == 200) {
            // try to decode JSON
            if ($json_data = json_decode($response->getBody(), true)) {
                // we have some data - extract the docs to return
                $docs = [];
                foreach ($json_data["rows"] as $document) {
                    $docs[] = new Document($document["doc"]);
                }
                return $docs;
            } else {
                throw new \PHPCouchDB\Exception\ServerException('JSON response not received or not understood');
            }
        }
    }

    /**
     * Create a new document in the database
     *
     * @param array $doc  An array representing the document's keys and values.
     *  The data can be nested arrays, lists, anything
     *  - if you include an "id" key, this will become the document ID,
     *      otherwise it'll be autogenerated
     * @return PHPCouchDB\Document a document object of your new doc
     */
    public function create($doc)
    {
        if (!is_array($doc)) {
            throw new \PHPCouchDB\Exception\DatabaseException('A document is required, in array format');
        }

        // do we have the ID?
        if (isset($doc['id']) && !empty($doc['id'])) {
            // remove the ID from the array, then use it in the URL with PUT
            $id = $doc['id'];
            unset($doc['id']);
            $endpoint = "/" . $this->db_name . "/" . $id;
            $verb = 'PUT';
        } else {
            // no ID, make a POST request to create the record
            $endpoint = "/" . $this->db_name . "/";
            $verb = 'POST';
        }

        try {
            $response = $this->client->request($verb, $endpoint, ['json' => $doc]);
            if ($response->getStatusCode() == 201 && $response_data = json_decode($response->getBody(), true)) {
                $id = $response_data['id'];
                // all good.  Let's fetch the doc and return it
                $fetched_data = json_decode($this->client->get('/' . $this->db_name . '/' . $id)->getBody());
                return new \PHPCouchDB\Document($fetched_data);
            }
        } catch (\GuzzleHttp\Exception\ConnectException $e) {
            throw new \PHPCouchDB\Exception\ServerException(
                "Could not create record.  Error: " . $e->getMessage(),
                0,
                $e
            );
        }
    }

    /**
     * Get a document whose ID you know
     *
     * @param string $id The doc's unique identifier
     * @return PHPCouchDB\Document The doc with the specified ID
     * @throws PHPCouchDB\Exception\ServerException if the response can't be understood
     * @throws PHPCouchDB\Exception\DatabaseException if the doc isn't found
     */
    public function getDocById($id) : \PHPCouchDB\Document
    {
        $endpoint = "/" . $this->db_name . "/" . $id;
        $response = $this->client->request("GET", $endpoint);
        if ($response->getStatusCode() == 200) {
            if ($json_data = json_decode($response->getBody(), true)) {
                $doc = new Document($json_data);
                return $doc;
            } else {
                throw new \PHPCouchDB\Exception\ServerException('JSON response not received or not understood');
            }
        } else {
            throw new \PHPCouchDB\Exception\DatabaseException('Document not found');
        }
    }
}
